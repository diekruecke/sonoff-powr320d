substitutions:
  device_name: sonoff-powr320d
  friendly_name: Sonoff POWR320D
  
  domain_name: ".smarthome"

  sensor_update_interval: 10s

packages:
  esphome_basis: !include includes/esphome_config.yaml
  homeassistant: !include includes/homeassistant_config.yaml

esphome:
  # name: sonoff-powr320d
  # friendly_name: $friendly_name

  # name_add_mac_suffix: true

  on_boot: # Set the initial state of the template switch to the actual relay state. This will NOT change the state.
    priority: 250.0 # Wait until WiFi is connected to allow the sensor some time to settle
    then:
      - if:
          condition:
            lambda: 'return id(v_sensor).state > 10;'
          then:
            - switch.turn_on: relay_1
          else:
            - switch.turn_off: relay_1

esp32:
  board: nodemcu-32s
  framework:
    type: esp-idf

# wifi:
#   domain: ".smarthome"
#   ap:

# captive_portal:

# logger:

# web_server:
#   version: 2

# api:

http_request:
  # verify_ssl: false

# ota:
#   - platform: esphome
#   - platform: http_request

update:
  - platform: http_request
    id: firmware_update_start
    name: Firmware Update
    source: https://diekruecke.github.io/sonoff-powr320d/firmware/manifest.json
    update_interval: 1h

button:
  - platform: template
    name: Update Firmware from Github
    on_press:
      then:
        - update.perform:
            id: firmware_update_start

uart:
  rx_pin: GPIO16
  baud_rate: 4800
  parity: even

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Berlin

sensor:
  - platform: cse7766
    current:
      name: Stromstärke
      id: a_sensor
      filters:
        - throttle_average: ${sensor_update_interval}
    voltage:
      name: Stromspannung
      id: v_sensor
      filters:
        - throttle_average: ${sensor_update_interval}
    power:
      name: Leistung
      id: w_sensor
      filters:
        - throttle_average: ${sensor_update_interval}
    energy:
      name: Energie
      id: wh_sensor
      filters:
        - throttle_average: ${sensor_update_interval}
    power_factor:
      name: Power Factor
      filters:
        - throttle_average: ${sensor_update_interval}
    apparent_power:
      name: Apparent Power
      id: apparent_power
      filters:
        - throttle_average: $sensor_update_interval

  - platform: total_daily_energy
    name: Täglicher Verbrauch
    power_id: w_sensor
    state_class: total_increasing
    device_class: energy
    restore: true
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  # - platform: uptime
  #   id: uptime_sensor
  #   internal: True

  - platform: internal_temperature
    name: "ESP 32 Internal Temperature"

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    name: "Hauptschalter Button"
    filters:
      - invert:
      - delayed_off: 10ms
    on_click:
      - max_length: 350ms # short press to toggle the relay
        then:
          switch.toggle: relay_1
      - min_length: 360ms # long press to cycle display info
        max_length: 3s
        then:
          - if:
              condition:
                binary_sensor.is_on: page
              then:
                binary_sensor.template.publish:
                  id: page
                  state: OFF
              else:
                binary_sensor.template.publish:
                  id: page
                  state: ON

  - platform: template # this is a fake sensor to tell the screen which info to show on display
    id: page
    publish_initial_state: true
    internal: true
  - platform: template
    name: $friendly_name Load
    id: load_on
    lambda: |-
      if (isnan(id(w_sensor).state)) {
        return {};
      } else if (id(w_sensor).state > 4) {
        // Running
        return true;
      } else {
        // Not running
        return false;
      }

display:
  platform: tm1621
  id: tm1621_display
  cs_pin: GPIO25
  data_pin: GPIO14
  read_pin: GPIO26
  write_pin: GPIO27
  lambda: |-
    if (id(page).state) {
      it.display_voltage(true);
      it.display_kwh(false);
      it.printf(0, "%.1f", id(v_sensor).state);
      it.printf(1, "%.1f", id(a_sensor).state);
    } else {  
      it.display_voltage(false);
      it.display_kwh(true);
      it.printf(0, "%.1f", id(wh_sensor).state);
      it.printf(1, "%.1f", id(w_sensor).state);
    }

output:
  - platform: ledc
    id: led
    pin:
      number: GPIO18
      inverted: True

switch:
  - platform: template
    name: "Hauptschalter"
    optimistic: true
    id: relay_1
    turn_off_action:
      - switch.turn_on: relay_off
    turn_on_action:
      - switch.turn_on: relay_on
  - platform: gpio
    restore_mode: ALWAYS_OFF
    internal: true
    id: relay_off
    pin: GPIO04
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay_off # bi-stable relay so no need to keep on
      - light.turn_off: switch_led
    interlock: [relay_on]
  - platform: gpio
    restore_mode: ALWAYS_OFF
    internal: true
    id: relay_on
    pin: GPIO02
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: relay_on  # bi-stable relay so no need to keep on
      - light.turn_on: switch_led
    interlock: [relay_off]
  # - platform: restart
  #   name: $friendly_name Restart

light:
  - platform: monochromatic
    id: switch_led
    output: led
    internal: True
  - platform: status_led
    id: wifi_status_led
    internal: True
    pin:
      number: GPIO05
      inverted: True

interval:
  - interval: 30s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - light.turn_on: wifi_status_led
        else:
          - light.turn_off: wifi_status_led